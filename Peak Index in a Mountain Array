o(n)
o(1)
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int ans;
        int n=arr.size();
        if(arr[0]>arr[1])
        {
            return 0;
        }
        if(arr[n-1]>arr[n-2])
        {
            return n-1;
        }
        for(int i=1;i<arr.size()-1;i++)
        {
           if((i==0 || arr[i]>arr[i-1] )&& (i==n-1 || arr[i]>arr[i+1]))
           {
               ans=i;
               break;
           }
        }
        return ans;
    }
};

optimal
o(logn)
o(1)
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int ans;
        int n=arr.size();
        int s=1;
        int e=n-2;
        if(arr[0]>arr[1])
        {
            return 0;
        }
        if(arr[n-1]>arr[n-2])
        {
            return n-1;
        }
        while(s<=e)
        {
            int mid=s+(e-s)/2;
            if(arr[mid]>arr[mid+1] && arr[mid-1]<arr[mid])
            {
                ans=mid;
                break;
            }
            if(arr[mid-1]>arr[mid])
            {
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        return ans;
    }
};
